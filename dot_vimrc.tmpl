" vim: ft=vim

set nocompatible

" to install vim-plug
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin()
" code integration
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'antoinemadec/coc-fzf'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'rhysd/vim-clang-format'
Plug 'Shougo/vimproc.vim' " required by vim vebugger
" Plug 'idanarye/vim-vebugger'
Plug 'puremourning/vimspector'
" Plug 'beeender/Comrade'
" see https://github.com/nvim-treesitter/nvim-treesitter/issues/700
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', 'commit': '3c07232'}  " We recommend updating the parsers on update

" productivity
Plug 'vimwiki/vimwiki'
Plug 'itchyny/calendar.vim'
Plug 'airblade/vim-gitgutter', {'do': 'git am `chezmoi source-path`/misc/vim-plug-hooks/0001-Claim-all-buffers-are-files-due-to-conflict-with-Com.patch'}
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'fidian/hexmode'
Plug 'bfredl/nvim-ipy'
Plug 'Chiel92/vim-autoformat'
Plug 'mvilim/nvim_ipykm'
Plug 'sjl/gundo.vim'
Plug 'mbbill/undotree'
Plug 'tpope/vim-abolish'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'xuhdev/vim-latex-live-preview'
" Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'}

" vim specific
Plug 'lukhio/vim-mapping-conflicts'
Plug 'itchyny/lightline.vim'
Plug 'luochen1990/rainbow'
Plug 'mattn/getsid-vim'
" https://github.com/kana/vim-submode/blob/master/doc/submode.txt
Plug 'kana/vim-submode'
Plug 'vim-scripts/SyntaxAttr.vim'

call plug#end()

syntax enable
set background=light

" lightline config
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
      \ }
      \ }

set tags=./tags;

" minimap config
" let g:minimap_width = 10
" let g:minimap_auto_start = 1
" let g:minimap_auto_start_win_enter = 1

" vebugger settings
" let g:vebugger_leader='<space>d'
" nnoremap <space>ddi :VBGrawWrite info locals<enter>
" nnoremap <space>ddb :VBGrawWrite backtrace<enter>

" Remove delay for key code timeouts
set timeoutlen=10000 ttimeoutlen=0

" Tab completion
set wildmenu
set wildmode=longest:full,full

" Line numbers
set number relativenumber
set lazyredraw
" Clipboard
set clipboard=unnamedplus

" Identation
" Show existing tab with 4 spaces width
set tabstop=4
" When indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
set smartindent
set cindent
" Indents word-wrapped lines as much as the 'parent' line
set breakindent
set breakindentopt=shift:4
" Ensures word-wrap does not split words
set formatoptions=l
set linebreak

au FileType * set fo-=o

" Allow cursor to go beyond EOL
set virtualedit=onemore
nnoremap $ $l

" Set line under cursor
set cursorline
hi CursorLine term=underline cterm=NONE gui=NONE ctermbg=236
hi CursorLineNr term=underline cterm=NONE gui=NONE ctermbg=NONE

" Warn on search wrap
hi WarningMsg ctermfg=white ctermbg=red guifg=White guibg=Red gui=None

" case insensitive on lowercase
set ignorecase
set smartcase

" status line
set laststatus=2
set statusline=%f
" allow hidden buffers
set hidden

" leader key mappings
let mapleader=" "
let maplocalleader=" "

" git gutter
set signcolumn=yes
set updatetime=100

" keep lines below and above
set scrolloff=5

" use K to break lines
nnoremap K i<CR><Esc>

if has('nvim')
  " disable highlighting on escape in nvim (for use after search) -- perhaps we
  " should run set nohlsearch and set hlsearch to clear them
  " this also applies to the CocOpenFloatPrompt
  nnoremap <silent> <esc> :noh<bar>:pclose<return>:call <SID>close_floating()<CR><esc>

  " would probably be better to not do this through the neovim api if possible
  function! s:close_floating()
    let wins = nvim_list_wins()
    for win in wins
      silent! let is_floating = nvim_win_get_var(win, 'float')
      if is_floating
        call nvim_win_close(win, 0)
      endif
    endfor
  endfunction
endif

nnoremap <leader>iha :call SyntaxAttr()<CR>

" for debugging highlighting
" https://stackoverflow.com/questions/9464844/how-to-get-group-name-of-highlighting-under-cursor-in-vim
nnoremap <leader>ihs :call SynStack()<CR>
nnoremap <leader>iht :call SynGroup()<CR>
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

" highlight extra whitespace
highlight ExtraWhitespace ctermbg=238
match ExtraWhitespace /\s\+\%#\@<!$/
" remove all trailing whitespace
nnoremap <leader>cw :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" custom colors
hi MatchParen ctermbg=black ctermfg=white
highlight! link SignColumn LineNr

" make ro buffers noma
" exlclude vim fugitive buffers, as making this breaks them (though they are
" already unmodifiable, not sure what the difference is)
autocmd BufRead *\(.fugitive*\)\@<! let &l:modifiable = !&readonly

" should use vim autoformat to pull in clangformat
" clang format mappings
" nnoremap <silent> <leader>cf :ClangFormat<CR>

" let g:clang_format#detect_style_file = 1
" let g:clang_format#style_options = {
"     \ "AllowShortBlocksOnASingleLine" : "false",
"     \ "AllowShortFunctionsOnASingleLine" : "Empty",
"     \ "SortIncludes" : "false",
"     \ }

" COC config
let g:coc_global_extensions = [
       \  'coc-java',
       \  'coc-pyright',
       \  'coc-tsserver',
       \ ]

highlight CocErrorHighlight ctermbg=52 guifg=#5f0000
highlight CocWarningHighlight ctermbg=52 guifg=#5f0000
highlight CocHintSign ctermfg=240
" since I don't use nvim through a GUI, this has no impact besides disabling
" the default highlight; for some reason term=NONE does not work unless issued
" after startup
highlight CocHintHighlight guifg=#FFFFFF

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

nnoremap <silent> <leader>laf :Autoformat<CR>

" COC mappings
nmap <silent> <leader>lN <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>ln <Plug>(coc-diagnostic-next)

nmap <silent> <leader>ld <Plug>(coc-definition)
nmap <silent> <leader>ly <Plug>(coc-type-definition)
nmap <silent> <leader>li <Plug>(coc-implementation)
nmap <silent> <leader>lr <Plug>(coc-references)
nmap <silent> <leader>lax <Plug>(coc-fix-current)
xmap <silent> <leader>lav <Plug>(coc-codeaction-selected)
nmap <silent> <leader>lac <Plug>(coc-codeaction-cursor)
nmap <silent> <leader>laa <Plug>(coc-codeaction
nmap <silent> <leader>lar <Plug>(coc-rename)
vmap <silent> <leader>lvs <Plug>(coc-range-select)
nmap <silent> <leader>lvs <Plug>(coc-range-select)

" range select
nnoremap <Plug>(visual-mode) :normal v<CR>
call submode#enter_with('edit', 'v', '', '<BS>', '<Nop>')
call submode#enter_with('edit', 'n', 'r', '<BS>', '<Plug>(visual-mode)')
" TODO use x option to leave both visual and edit mode
" TODO only enter visual mode when range select is used)
call submode#map('edit', 'v', 'r', 'e', '<Plug>(call-coc-range-select)')
let g:submode_timeout = 0

vnoremap <Plug>(call-coc-range-select) :<C-u>call CocAction('rangeSelect', visualmode(), v:true)<CR>

nnoremap <silent> <leader>ls :call <SID>show_documentation()<CR>

nnoremap <silent> <leader>lfd :CocFzfList diagnostics<cr>
nnoremap <silent> <leader>lfs :CocFzfList symbols<cr>
nnoremap <silent> <leader>lfo :CocFzfList outline<cr>
nnoremap <silent> <leader>lfc :CocFzfList commands<cr>

nnoremap <silent> <leader>l% :CocCommand rust-analyzer.matchingBrace<cr>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

inoremap <silent><expr> <c-space> coc#refresh()

hi CocHighlightText ctermfg=white

autocmd User CocOpenFloatPrompt call s:coc_configure_floating_window()

function s:coc_configure_floating_window() abort
    iunmap <buffer> <C-a>
    iunmap <buffer> <C-e>
    iunmap <buffer> <esc>
    nunmap <buffer> <esc>
    call feedkeys("\<esc>^", 'n')
    nmap <buffer> <cr> i<cr>
endfunction

" disable vimwiki table mappings since they somehow conflict with this <TAB>
" binding for coc
let g:vimwiki_table_mappings = 0
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" vimspector mappings
" let g:vimspector_enable_mappings = 'HUMAN'
" TODO add mappings for navigating between the windows
nmap <silent> <leader>dc <Plug>VimspectorContinue
" nmap <silent> <leader>dl <Plug>VimspectorLaunch
nmap <silent> <leader>dl :call VimspectorLaunchContext()<CR>
nmap <silent> <leader>dt <Plug>VimspectorStop
nmap <silent> <leader>dr <Plug>VimspectorRestart
nmap <silent> <leader>dp <Plug>VimspectorPause
nmap <silent> <leader>db <Plug>VimspectorToggleBreakpoint
nmap <silent> <leader>dv <Plug>VimspectorToggleConditionalBreakpoint
nmap <silent> <leader>df <Plug>VimspectorAddFunctionBreakpoint
nmap <silent> <leader>do :VimspectorReset<CR>
nmap <silent> <leader>dsv <Plug>VimspectorStepOver
nmap <silent> <leader>dsi <Plug>VimspectorStepInto
nmap <silent> <leader>dso <Plug>VimspectorStepOut
nmap <silent> <leader>dsc <Plug>VimspectorRunToCursor
nmap <silent> <leader>dfk <Plug>VimspectorUpFrame
nmap <silent> <leader>dfj <Plug>VimspectorDownFrame
nmap <silent> <leader>de <Plug>VimspectorBalloonEval
nmap <silent> <leader>dwb <Plug>VimspectorBreakpoints

" TODO a more advanced submode plugin would be needed for these sort of
" mappings, since we would want to supplement the existing navigational
" mappings rather than replace them
" note that a empty { lhs } in the enter_with command will cause the mode to
" immediately be left
" call submode#enter_with('debug', 'n', '', '<leader>d')
" call submode#leave_with('debug', 'n', '', '<Esc>')
" call submode#map('debug', 'n', 'r', 'c', '<Plug>VimspectorContinue')
" call submode#map('debug', 'n', 'r', '<space>', '<Plug>VimspectorToggleBreakpoint')

function! VimspectorLaunchContext()
    let path = expand('%:p')
    let li =  line('.')
    let co = col('.')
    let output = split(system("cargo find-executable arg-input" . " --filename " . path . " --line-number " . li . " --column-number " . co), "\n")
    " TODO validate output count
    call assert_equal(len(output), 3)
    let library_path = output[0]
    let executable_path = output[1]
    let test_name = output[2]
    echo library_path
    echo executable_path
    echo test_name
    call vimspector#LaunchWithSettings( #{ configuration: 'test',
                                         \ library_path: library_path,
                                         \ executable_path: executable_path,
                                         \ test_name: test_name } )
endfunction

" locationlist mappings
nnoremap <silent> <leader>ll :lop<CR>
nnoremap <silent> <leader>ln :lnext<CR>
nnoremap <silent> <leader>lp :lprev<CR>
nnoremap <silent> <leader>lc :lclose<CR>
" quickfixlist mappings
nnoremap <silent> <leader>ql :copen<CR>
nnoremap <silent> <leader>qn :cn<CR>
nnoremap <silent> <leader>qp :cp<CR>
nnoremap <silent> <leader>qc :cclose<CR>
" make location list close by default (and shift cr keeps it open)
autocmd FileType qf nnoremap <buffer> <silent> <cr> <cr>:lcl<cr>
autocmd FileType qf nnoremap <buffer> <silent> p <cr>:lop<cr>
autocmd FileType qf nnoremap <buffer> <silent> o <cr>
autocmd FileType qf nnoremap <buffer> <silent> <Esc> :lcl<cr> :ccl<cr>

" fzf mappings
nnoremap <silent> <leader>ff :Files<CR>
nnoremap <silent> <leader>fb :Buffers<CR>
nnoremap <silent> <leader>fw :Windows<CR>
nnoremap <silent> <leader>fh :History<CR>
nnoremap <silent> <leader>fl :Rgb<CR>
nnoremap <silent> <leader>fc :Commands<CR>
nnoremap <silent> <leader>fa :Ag<CR>
nnoremap <silent> <leader>fr :Rg<CR>
nnoremap <silent> <leader>fi :Rgi<CR>
" See https://stackoverflow.com/questions/13830874/why-do-some-vim-mappings-include-c-u-after-a-colon
" <C-U> (Ctrl-U) clears the visual selection from the prompt
vnoremap <silent> <leader>fv :<C-U>Rgv<CR>
nnoremap <silent> <leader>fn :<C-U>Rgnc<CR>

let s:rg_base = 'rg --column --line-number --no-heading --color=always --smart-case --hidden'
let s:rgg = s:rg_base.' --glob "!**/.git/**" '
" TODO the problem here is that we need to apply this to the fzf search, not
" the rg search (e.g. we don't want to ignore all lines with a comment, just
" matches that are in a comment)
let s:rgnc = s:rg_base.' -v "^\s*//"'
" ignore filename for ripgrep
let s:fzf_options = '--delimiter : --nth 4..'
function s:make_fzf_query_options(query)
  return s:fzf_options . ' -q ' . query
endfunction

function s:make_fzf_options_dict(fzf_options)
  return {'options': a:fzf_options}
endfunction

let s:fzf_options_dict = s:make_fzf_options_dict(s:fzf_options)

" see https://github.com/junegunn/fzf.vim/issues/374 for similar scripts
command! -bang -nargs=* Rg call fzf#vim#grep(s:rgg.shellescape(<q-args>).'', 1, s:fzf_options_dict, <bang>0)
command! -bang -nargs=* Rgnc call fzf#vim#grep(s:rgnc.shellescape(<q-args>).'', 1, s:fzf_options_dict, <bang>0)
command! -bang -nargs=* Rgb call fzf#vim#grep(s:rg_base . ' --with-filename ' . shellescape(<q-args>) . ' ' . fnameescape(expand('%')), 1, s:fzf_options_dict, <bang>0)
command! -bang -nargs=* Rgi call fzf#vim#grep(s:rgg.shellescape(<q-args>), 1, s:make_fzf_options_dict(' -q '.shellescape(expand('<cword>'))), <bang>0)
command! -bang -nargs=* Rgv call fzf#vim#grep(s:rgg.shellescape(<q-args>), 1, s:make_fzf_options_dict(' -q '.s:get_visual_selection())), <bang>0)

" from https://stackoverflow.com/questions/1533565/how-to-get-visually-selected-text-in-vimscript
function! s:get_visual_selection()
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - 1]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

" use fd as fzf find command
let $FZF_DEFAULT_COMMAND = 'fd --hidden --type f --exclude "**/.git/" --strip-cwd-prefix'
" we would prefer first matching filenames (with a priority of length) and
" then match directories with a lower priority, but this is apparently not
" possible, so we choose to just match filenames

" this should only be set for file completions -- it breaks things like
" looking for string matches in the current file
let $FZF_DEFAULT_OPTS = "--delimiter=/ --nth=-1,.. --tiebreak=end"

let g:fzf_layout = { 'down': '40%' }
let g:fzf_preview_window = []

" NERDTree mappings
" TODO make this specific to project type
let NERDTreeIgnore=['^target$[[dir]]']
" would probably be better if the existing window was used for browsing
" instead of using a new one (see vinegar)
nnoremap <silent> <leader>t :call NERDTreeCustom()<CR>
function! NERDTreeCustom()
  if g:NERDTree.ExistsForBuf()
    exe 'NERDTreeClose'
  else
    exe 'NERDTreeFocus'
  endif
endfunc

" window navigation mappings
nnoremap <silent> <leader>wh <C-w>h
nnoremap <silent> <leader>wj <C-w>j
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wl <C-w>l

" ctrl-nav keys
nnoremap <C-j> <Down>
nnoremap <C-k> <Up>
nnoremap <C-h> <Left>
nnoremap <C-l> <Right>

inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

" digraph remapping
inoremap <silent> <C-d> <C-k>

" alt-nav keys
noremap <A-j> gj
noremap <A-k> gk
noremap <A-h> gh
noremap <A-l> gl

" gutter mappings
nnoremap <silent> <leader>gn :GitGutterNextHunk<CR>
nnoremap <silent> <leader>g<S-n> :GitGutterPrevHunk<CR>
nnoremap <silent> <leader>gu :GitGutterUndoHunk<CR>
nnoremap <silent> <leader>gg :GitGutter<CR>

" fugitive
nnoremap <silent> <leader>gb :Git blame<CR>

" cpp syntax highlighting config
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1

" vimwiki config
nmap <Leader>wn <Plug>VimwikiNextLink
nmap <Leader>wp <Plug>VimwikiPrevLink
let g:vimwiki_folding='expr'
hi Folded ctermbg=23
let g:vimwiki_ext2syntax = {'.md': 'markdown',
                  \ '.mkd': 'markdown',
                  \ '.wiki': 'media'}

function InitVimwikiCustomSyntax()
    if !exists("s:vimwiki_init")
        let s:vimwiki_init = 1
        let g:vimwiki_syntax_variables['markdown']['rxEqIn'] = '\$\$[^$`]\+\$\$'
        let g:vimwiki_syntax_variables['markdown']['char_eqin'] = '\$\$'
        " should pull out a variable with the vundle path and note that it is
        " vundle specific
        " let g:test = GetSID("~/.vim/bundle/vimwiki/plugin/vimwiki.vim")
        " let g:test = GetSID("~/.vim/bundle/vimwiki/syntax/vimwiki_markdown.vim")
        " call function("<SNR>27_setup_buffer_leave")()
        " call function("<SNR>27_setup_new_wiki_buffer")()

        " echom 'calling'
        " call function("<SNR>27_setup_buffer_enter")()

        " let <SNR>117_markdown_syntax.rxEqIn = '\$\$[^$`]\+\$\$'

        " echom 'called'
        " reload the file to force vimwiki update -- hacky, but would only
        " cause issues if we are somehow able to modify a file on disk between
        " the the vimwiki init and this function running
        "
        " I think this creates issues when the file does not yet exist, though
        " try
        silent! edit
        " catch
        " endtry
    endif
endfunction
autocmd FileType vimwiki call InitVimwikiCustomSyntax()
" autocmd BufReadPre * call InitVimwikiCustomSyntax()
autocmd FileType vimwiki RainbowToggleOff

" call vimwiki#vars#init()
" let g:vimwiki_syntax_variables['markdown']['rxEqIn'] = '\$\$[^$`]\+\$\$'
" let g:vimwiki_syntax_variables['markdown']['char_eqin'] = '\$\$'

" indent searching
nnoremap <Leader>[N :call search('^'. matchstr(getline('.'), '\(^\s*\)') .'\%<' . line('.') . 'l\S', 'be')<CR>
nnoremap <Leader>[n :call search('^'. matchstr(getline('.'), '\(^\s*\)') .'\%>' . line('.') . 'l\S', 'e')<CR>

" fold config
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2

" code execution keys
map <Leader>ee <Plug>(IPy-Run)
map <Leader>ec <Plug>(IPy-RunCell)
map <Leader>ea <Plug>(IPy-RunAll)
map <Leader>ep <Plug>(IPy-Complete)
map <Leader>ei <Plug>(IPy-WordInfo)
map <Leader>es <Plug>(IPy-Interrupt)
map <Leader>et <Plug>(IPy-Terminate)

" ipython cell defes
let g:ipy_celldef = '^##'

nmap <leader>p <Plug>yankstack_substitute_older_paste<CR>
nmap <leader>P <Plug>yankstack_substitute_newer_paste<CR>

" should probably restrict modelines further
" set nomodeline

let g:gundo_prefer_python3 = 1
" nnoremap <leader>u :GundoToggle<CR>
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
set undodir=/tmp/vim_undo/
set undofile

let g:rainbow_active = 1

" nvim-ipykm mappings
nnoremap <leader>kk <Cmd>IPyConnectKernel<cr>
nnoremap <leader>kr <Cmd>IPyRestartKernel<cr>
nnoremap <leader>ki <Cmd>IPyInterruptKernel<cr>
set winminheight=0
let g:ipython_args = '--no-window'

" disable statusline when fzf
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" allow nvim_ipykm zero height windows
set winminheight=0

" path bindings
nmap <leader>yr :let @+ = expand("%")<cr>
nmap <leader>yp :let @+ = expand("%:p")<cr>

" jinja filetype for .j2
au BufEnter,BufNew *.j2 map <F5> :rubyf % <CR>.

" highlight visual as grey
hi Visual ctermbg=239

" tex preview
let g:livepreview_cursorhold_recompile = 0

" close buffer without closing window
command Bd bp\|bd \#

command CloseAllBuffers bufdo bwipeout

{{ if .has_local_templates -}}
{{ template "local/dot_vimrc" -}}
{{ end -}}
